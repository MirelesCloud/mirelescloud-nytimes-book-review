{"version":3,"sources":["Styles.ts","Modal.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GlobalStyle","createGlobalStyle","Nav","styled","div","NavHeader","NavLeft","NavCenter","NavRight","MainContainer","ContentWrapper","Container","ImageContainer","Image","img","DropdownContent","h6","p","Select","select","Overlay","Dialog","ModalContainer","ModalWrapper","ModalContent","Column","Row","ModalHeader","h3","ModalSubHeader","h4","ModalText","CloseModal","Line","hr","Context","React","createContext","ModalProvider","children","modalRef","useRef","useState","context","setContext","useEffect","current","Provider","value","ref","Modal","onClose","props","modalNode","useContext","ReactDOM","createPortal","onClick","Books","rank","title","author","book_image","description","book_review_link","isModalOpen","setIsModalOpen","src","alt","href","target","rel","App","status","result","setResult","book","setBooks","today","Date","date","getFullYear","getMonth","slice","getDate","useMemo","fetch","process","then","response","json","payload","console","log","catch","error","onChange","e","results","books","map","idx","key","Boolean","window","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d7f7b8e2.chunk.js","sourcesContent":["import styled, { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n      \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\n      monospace;\n  }\n`\n/* Header */\nexport const Nav = styled.div`\n    background-color: #f7f7f5;\n    border-bottom: 1px solid rgba(0, 0, 0, 0.0975);\n`\n\nexport const NavHeader = styled.div`\n    max-width: 1010px;\n    padding: 26px 20px;\n    width: 100%;\n    display: flex;\n    align-items: center;\n    margin: 0 auto;\n`\n\nexport const NavLeft = styled.div`\n    width: 33.333%;\n    text-align: left;\n    font-size: 2em;\n    font-weight: 300;\n\n    @media (max-width: 378px) {\n        font-size: 1.5em;\n      }\n`\n\nexport const NavCenter = styled.div`\n    wdith; 33.333%;\n    text-align: center;\n    font-size: 2em;\n    font-weight: 300;\n    @media (max-width: 378px) {\n        font-size: 1.5em;\n      }\n`\n\nexport const NavRight = styled.div`\n    width: 33.333%;\n    text-align: right;\n    font-size: 30px;\n    font-weight: 300;\n`\n\n/* Body */\n\nexport const MainContainer = styled.div`\n  max-width: 1010px;\n  width: 100%;\n  margin: 20px auto;\n`\n\nexport const ContentWrapper = styled.div`\n  margin-top: 50px;\n  display: flex;\n  flex-wrap: wrap;\n`\nexport const Container = styled.div`\n  max-width: 1010px;\n  width: 100%;\n  margin: 20px, auto;\n`\n\nexport const ImageContainer = styled.div`\n    position: relative;\n    flex-basis: 100%;\n    flex-basis: calc(20% - 20px);\n    margin: 10px;\n    cursor: pointer;\n    transition: 0.3s all ease-in;\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\n\n    @media (max-width: 992px) {\n      flex-basis: calc( 33.333% - 20px);\n    }\n\n    @media (max-width: 600px) {\n      flex-basis: calc(50% - 20px)\n    }\n\n    &:hover {\n      box-shadow: 0 12px 16px 0 rgba(0,0,0,0.2);\n    }\n`\n\nexport const InfoImage = styled.div`\n  padding: 5px 10px;\n`\n\nexport const Image = styled.img`\n    cursor: pointer;\n    width: 100%;\n`\n\nexport const InfoDetails = styled.div`\n  display: flex;\n`\n\nexport const InfoDetailsLeft = styled.div`\n  margin-right: 40px;\n  width: 300px;\n  display: flex;\n  align-items: center;\n`\n\nexport const InfoDetailsRight = styled.div`\n  display: flex;\n  align-items: end;\n  justify-content: center;\n  flex-direction: column;\n`\n\nexport const InfoHeader = styled.h6``;\n\nexport const InfoText = styled.p`\n  padding: 0px;\n  margin: 3px;\n\n`\n\n/* Dropdown */\nexport const DropdownContent = styled.div`\n  display: none;\n  position: absolute;\n  background-color: #f9f9f9;\n  min-width: 160px;\n  box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\n  padding: 12px 16px;\n  z-index: 1;\n`\nexport const Dropdown = styled.div`\n  position: relative;\n  display: inline-block;\n  cursor: pointer;\n\n  &:hover ${DropdownContent} {\n    display: block;\n  }\n`\n\nexport const Select = styled.select`\n  width: 300px;\n  font-size: 1rem;\n  margin-right: 20px;\n`\n\n\n\n/* Modal */\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  background: rgba(0, 0, 0, 0.3);\n`\n\nexport const Dialog = styled.div`\n  background: white;\n  border-radius: 5px;\n  padding: 20px;\n  position: absolute;\n  top: 50%;\n  left 50%;\n  transform: translate(-50%, -50%);\n  z-index: 1;\n  \n`\n\nexport const ModalContainer = styled.div`\n  position: relative;\n  z-index: 0;\n  \n`\n\nexport const ModalWrapper = styled.div`\n  margin-top: 10px;\n  display: flex;\n  flex-wrap: wrap;\n`\nexport const ModalContent = styled.div`\n  position: relative;\n  flex-basis: 100%;\n  margin: 10px;\n  cursor: pointer;\n  transition: 0.3s all ease-in;\n`\n\n\nexport const Column = styled.div`\n  float: left;\n  width: 50%;\n`\n\nexport const Row = styled.div`\n  &::after {\n    content: \"\";\n    clear: both;\n    display: table;\n  }\n`\n\nexport const ModalHeader = styled.h3``\n\nexport const ModalSubHeader = styled.h4``\n\nexport const ModalText = styled.p`\n  padding: 0px;\n  margin: 3px;\n`\nexport const CloseModal = styled.p`\n  &:after {\n    content: 'x';\n    position: relative;\n    left: 500px;\n    cursor: pointer;\n    font-weight: 900;\n    \n\n  }\n  \n`\nexport const Line = styled.hr`\n  color: rgba(0, 0, 0, 0.7);\n  \n`","import React, { useRef, useContext, useState, useEffect } from 'react'\nimport { Overlay, Dialog, Container, CloseModal  } from './Styles'\nimport ReactDOM from 'react-dom';\n\nconst Context = React.createContext(null);\n\nexport function ModalProvider({children}: any) {\n  const modalRef = useRef(null);\n  const [context, setContext] = useState();\n  \n\n  useEffect(() => {\n      setContext(modalRef.current)\n  }, []);\n\n  return (\n    <Container>\n      <Context.Provider value={context}>{children}</Context.Provider>\n      <div ref={modalRef} />\n    </Container>\n  )\n}\n\nexport function Modal({onClose, children, ...props }: any) {\n  const modalNode = useContext(Context);\n\n  return  modalNode\n    ? ReactDOM.createPortal(\n      <Overlay>\n        <Dialog {...props}>\n          <CloseModal onClick={onClose}/>\n          {children}\n        </Dialog>\n      </Overlay>,\n      modalNode\n    )\n    : null; \n}","import React, { Fragment,  useState, useEffect, useMemo } from 'react';\nimport {Service, ICategory, IBooks} from './Types'\nimport { \n  GlobalStyle, \n  Nav, \n  NavHeader, \n  NavLeft, \n  NavCenter, \n  NavRight, \n  MainContainer, \n  ContentWrapper, \n  Container, \n  ImageContainer, \n  Image, \n  ModalWrapper,\n  ModalContainer, \n  ModalContent, \n  ModalHeader, \n  ModalSubHeader, \n  ModalText,\n  Row,\n  Column,\n  Line, \n  Select,\n  } from './Styles'\nimport { Modal, ModalProvider } from './Modal'\n\nimport './App.css';\n\nconst API_KEY = process.env.REACT_APP_NYTIMES_API_KEY;\n\nconst App: React.FC = () => {\n  const [ result, setResult ] = useState<Service<ICategory>>({\n    status: 'loading'\n  })\n  const [book, setBooks] = useState<string>(\"hardcover-nonfiction\")\n\n  let today = new Date();\n  let date = today.getFullYear()+'-'+('0'+(today.getMonth()+1)).slice(-2)+'-'+(\"0\"+today.getDate()).slice(-2)\n  \n  useMemo(() => {\n    fetch(`https://api.nytimes.com/svc/books/v3/lists/${date}/${book}.json?api-key=${API_KEY}`)\n      .then(response => response.json())\n      .then(response => {\n        setResult({ status: 'loaded', payload: response})\n        console.log(response)\n      })\n      .catch(error => setResult({ status: 'error', error}))\n\n  }, [book, date])\n\n \n\n  return (\n    <Fragment>\n      <GlobalStyle/>\n      <Nav>\n        <NavHeader>\n          <NavLeft>MirelesCloud</NavLeft>\n          <NavCenter></NavCenter>\n          <NavRight>NY Times Bestsellers</NavRight>\n        </NavHeader>\n      </Nav>\n      <MainContainer>\n        <Container>\n          <Select value={book} onChange={( e: React.ChangeEvent<HTMLSelectElement>, ): void => setBooks(e.target.value)} >\n            <option value=\"hardcover-nonfiction\">Non-Fiction</option>\n            <option value=\"combined-print-and-e-book-nonfiction\">Combined Print and E-Book Non-Fiction</option>\n            <option value=\"paperback-nonfiction\">Paperback Non-Fiction</option>\n            <option value=\"advice-how-to-and-miscellaneous\">Advice, How-to & Misc.</option>\n          </Select>\n          <Select value={book} onChange={( e: React.ChangeEvent<HTMLSelectElement>, ): void => setBooks(e.target.value)}>\n            <option value=\"hardcover-fiction\">Fiction</option>\n            <option value=\"combined-print-and-e-book-fiction\">Combined Print and E-Book Fiction</option>\n            <option value=\"trade-fiction-paperback\">Paperback Trade Fiction</option>\n          </Select >\n          \n          <ModalProvider>\n            <ContentWrapper>\n              {result.status === 'loaded' && result.payload.results.books.map(idx => (\n              <ImageContainer key={idx.rank}>\n                <Books rank={idx.rank} title={idx.title} author={idx.author} book_image={idx.book_image} description={idx.description} book_review_link={idx.book_review_link}/>\n              </ImageContainer>\n            ))}\n            </ContentWrapper>\n          </ModalProvider>\n        </Container>\n      </MainContainer>\n    </Fragment>\n  );\n}\n\nconst Books: React.FC<IBooks> = ({rank, title, author, book_image, description, book_review_link}) => {\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  return (\n    <>\n      <Image src={book_image} alt={title} onClick={() => setIsModalOpen(true)}/>\n      {isModalOpen && <Modal onClose={() => setIsModalOpen(false)}>\n          <ModalWrapper>\n            <ModalContainer>\n              <Row>\n                <Column>\n                  <ModalContent>\n                    <Image src={book_image} alt={title}/>\n                  </ModalContent>\n                </Column>\n                <Column>\n                  <ModalContent>\n                    <ModalHeader>{title}</ModalHeader>\n                    <ModalSubHeader>By {author}</ModalSubHeader>\n                    <ModalSubHeader>NY Times Rank No. {rank}</ModalSubHeader>\n                    <ModalText>{description}</ModalText>\n                    <ModalText><a href={book_review_link} target=\"_blank\" rel=\"noopener noreferrer\" >Review</a></ModalText>\n\n                  </ModalContent>\n                 \n                </Column>\n              </Row>\n             \n              \n              <Line/>\n            </ModalContainer>\n          </ModalWrapper>\n        </Modal>}\n    </>\n    \n  )\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}